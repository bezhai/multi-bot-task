// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bezhai/multi-bot-task/biz/mysql/model"
)

func newUserPermission(db *gorm.DB, opts ...gen.DOOption) userPermission {
	_userPermission := userPermission{}

	_userPermission.userPermissionDo.UseDB(db, opts...)
	_userPermission.userPermissionDo.UseModel(&model.UserPermission{})

	tableName := _userPermission.userPermissionDo.TableName()
	_userPermission.ALL = field.NewAsterisk(tableName)
	_userPermission.UserID = field.NewInt32(tableName, "user_id")
	_userPermission.PermissionID = field.NewInt32(tableName, "permission_id")

	_userPermission.fillFieldMap()

	return _userPermission
}

// userPermission 关联用户和一般权限
type userPermission struct {
	userPermissionDo userPermissionDo

	ALL          field.Asterisk
	UserID       field.Int32 // 用户ID
	PermissionID field.Int32 // 权限ID

	fieldMap map[string]field.Expr
}

func (u userPermission) Table(newTableName string) *userPermission {
	u.userPermissionDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userPermission) As(alias string) *userPermission {
	u.userPermissionDo.DO = *(u.userPermissionDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userPermission) updateTableName(table string) *userPermission {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewInt32(table, "user_id")
	u.PermissionID = field.NewInt32(table, "permission_id")

	u.fillFieldMap()

	return u
}

func (u *userPermission) WithContext(ctx context.Context) *userPermissionDo {
	return u.userPermissionDo.WithContext(ctx)
}

func (u userPermission) TableName() string { return u.userPermissionDo.TableName() }

func (u userPermission) Alias() string { return u.userPermissionDo.Alias() }

func (u userPermission) Columns(cols ...field.Expr) gen.Columns {
	return u.userPermissionDo.Columns(cols...)
}

func (u *userPermission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userPermission) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 2)
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["permission_id"] = u.PermissionID
}

func (u userPermission) clone(db *gorm.DB) userPermission {
	u.userPermissionDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userPermission) replaceDB(db *gorm.DB) userPermission {
	u.userPermissionDo.ReplaceDB(db)
	return u
}

type userPermissionDo struct{ gen.DO }

func (u userPermissionDo) Debug() *userPermissionDo {
	return u.withDO(u.DO.Debug())
}

func (u userPermissionDo) WithContext(ctx context.Context) *userPermissionDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userPermissionDo) ReadDB() *userPermissionDo {
	return u.Clauses(dbresolver.Read)
}

func (u userPermissionDo) WriteDB() *userPermissionDo {
	return u.Clauses(dbresolver.Write)
}

func (u userPermissionDo) Session(config *gorm.Session) *userPermissionDo {
	return u.withDO(u.DO.Session(config))
}

func (u userPermissionDo) Clauses(conds ...clause.Expression) *userPermissionDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userPermissionDo) Returning(value interface{}, columns ...string) *userPermissionDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userPermissionDo) Not(conds ...gen.Condition) *userPermissionDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userPermissionDo) Or(conds ...gen.Condition) *userPermissionDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userPermissionDo) Select(conds ...field.Expr) *userPermissionDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userPermissionDo) Where(conds ...gen.Condition) *userPermissionDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userPermissionDo) Order(conds ...field.Expr) *userPermissionDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userPermissionDo) Distinct(cols ...field.Expr) *userPermissionDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userPermissionDo) Omit(cols ...field.Expr) *userPermissionDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userPermissionDo) Join(table schema.Tabler, on ...field.Expr) *userPermissionDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userPermissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userPermissionDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userPermissionDo) RightJoin(table schema.Tabler, on ...field.Expr) *userPermissionDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userPermissionDo) Group(cols ...field.Expr) *userPermissionDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userPermissionDo) Having(conds ...gen.Condition) *userPermissionDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userPermissionDo) Limit(limit int) *userPermissionDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userPermissionDo) Offset(offset int) *userPermissionDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userPermissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userPermissionDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userPermissionDo) Unscoped() *userPermissionDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userPermissionDo) Create(values ...*model.UserPermission) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userPermissionDo) CreateInBatches(values []*model.UserPermission, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userPermissionDo) Save(values ...*model.UserPermission) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userPermissionDo) First() (*model.UserPermission, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPermission), nil
	}
}

func (u userPermissionDo) Take() (*model.UserPermission, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPermission), nil
	}
}

func (u userPermissionDo) Last() (*model.UserPermission, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPermission), nil
	}
}

func (u userPermissionDo) Find() ([]*model.UserPermission, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserPermission), err
}

func (u userPermissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPermission, err error) {
	buf := make([]*model.UserPermission, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userPermissionDo) FindInBatches(result *[]*model.UserPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userPermissionDo) Attrs(attrs ...field.AssignExpr) *userPermissionDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userPermissionDo) Assign(attrs ...field.AssignExpr) *userPermissionDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userPermissionDo) Joins(fields ...field.RelationField) *userPermissionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userPermissionDo) Preload(fields ...field.RelationField) *userPermissionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userPermissionDo) FirstOrInit() (*model.UserPermission, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPermission), nil
	}
}

func (u userPermissionDo) FirstOrCreate() (*model.UserPermission, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPermission), nil
	}
}

func (u userPermissionDo) FindByPage(offset int, limit int) (result []*model.UserPermission, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userPermissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userPermissionDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userPermissionDo) Delete(models ...*model.UserPermission) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userPermissionDo) withDO(do gen.Dao) *userPermissionDo {
	u.DO = *do.(*gen.DO)
	return u
}

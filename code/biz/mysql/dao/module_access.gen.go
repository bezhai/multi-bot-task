// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bezhai/multi-bot-task/biz/mysql/model"
)

func newModuleAccess(db *gorm.DB, opts ...gen.DOOption) moduleAccess {
	_moduleAccess := moduleAccess{}

	_moduleAccess.moduleAccessDo.UseDB(db, opts...)
	_moduleAccess.moduleAccessDo.UseModel(&model.ModuleAccess{})

	tableName := _moduleAccess.moduleAccessDo.TableName()
	_moduleAccess.ALL = field.NewAsterisk(tableName)
	_moduleAccess.ID = field.NewInt32(tableName, "id")
	_moduleAccess.Name = field.NewString(tableName, "name")

	_moduleAccess.fillFieldMap()

	return _moduleAccess
}

// moduleAccess 存储模块准入权限
type moduleAccess struct {
	moduleAccessDo moduleAccessDo

	ALL  field.Asterisk
	ID   field.Int32  // 模块准入权限ID，主键
	Name field.String // 模块名称

	fieldMap map[string]field.Expr
}

func (m moduleAccess) Table(newTableName string) *moduleAccess {
	m.moduleAccessDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m moduleAccess) As(alias string) *moduleAccess {
	m.moduleAccessDo.DO = *(m.moduleAccessDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *moduleAccess) updateTableName(table string) *moduleAccess {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Name = field.NewString(table, "name")

	m.fillFieldMap()

	return m
}

func (m *moduleAccess) WithContext(ctx context.Context) *moduleAccessDo {
	return m.moduleAccessDo.WithContext(ctx)
}

func (m moduleAccess) TableName() string { return m.moduleAccessDo.TableName() }

func (m moduleAccess) Alias() string { return m.moduleAccessDo.Alias() }

func (m moduleAccess) Columns(cols ...field.Expr) gen.Columns {
	return m.moduleAccessDo.Columns(cols...)
}

func (m *moduleAccess) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *moduleAccess) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 2)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
}

func (m moduleAccess) clone(db *gorm.DB) moduleAccess {
	m.moduleAccessDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m moduleAccess) replaceDB(db *gorm.DB) moduleAccess {
	m.moduleAccessDo.ReplaceDB(db)
	return m
}

type moduleAccessDo struct{ gen.DO }

func (m moduleAccessDo) Debug() *moduleAccessDo {
	return m.withDO(m.DO.Debug())
}

func (m moduleAccessDo) WithContext(ctx context.Context) *moduleAccessDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m moduleAccessDo) ReadDB() *moduleAccessDo {
	return m.Clauses(dbresolver.Read)
}

func (m moduleAccessDo) WriteDB() *moduleAccessDo {
	return m.Clauses(dbresolver.Write)
}

func (m moduleAccessDo) Session(config *gorm.Session) *moduleAccessDo {
	return m.withDO(m.DO.Session(config))
}

func (m moduleAccessDo) Clauses(conds ...clause.Expression) *moduleAccessDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m moduleAccessDo) Returning(value interface{}, columns ...string) *moduleAccessDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m moduleAccessDo) Not(conds ...gen.Condition) *moduleAccessDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m moduleAccessDo) Or(conds ...gen.Condition) *moduleAccessDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m moduleAccessDo) Select(conds ...field.Expr) *moduleAccessDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m moduleAccessDo) Where(conds ...gen.Condition) *moduleAccessDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m moduleAccessDo) Order(conds ...field.Expr) *moduleAccessDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m moduleAccessDo) Distinct(cols ...field.Expr) *moduleAccessDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m moduleAccessDo) Omit(cols ...field.Expr) *moduleAccessDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m moduleAccessDo) Join(table schema.Tabler, on ...field.Expr) *moduleAccessDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m moduleAccessDo) LeftJoin(table schema.Tabler, on ...field.Expr) *moduleAccessDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m moduleAccessDo) RightJoin(table schema.Tabler, on ...field.Expr) *moduleAccessDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m moduleAccessDo) Group(cols ...field.Expr) *moduleAccessDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m moduleAccessDo) Having(conds ...gen.Condition) *moduleAccessDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m moduleAccessDo) Limit(limit int) *moduleAccessDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m moduleAccessDo) Offset(offset int) *moduleAccessDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m moduleAccessDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *moduleAccessDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m moduleAccessDo) Unscoped() *moduleAccessDo {
	return m.withDO(m.DO.Unscoped())
}

func (m moduleAccessDo) Create(values ...*model.ModuleAccess) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m moduleAccessDo) CreateInBatches(values []*model.ModuleAccess, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m moduleAccessDo) Save(values ...*model.ModuleAccess) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m moduleAccessDo) First() (*model.ModuleAccess, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModuleAccess), nil
	}
}

func (m moduleAccessDo) Take() (*model.ModuleAccess, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModuleAccess), nil
	}
}

func (m moduleAccessDo) Last() (*model.ModuleAccess, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModuleAccess), nil
	}
}

func (m moduleAccessDo) Find() ([]*model.ModuleAccess, error) {
	result, err := m.DO.Find()
	return result.([]*model.ModuleAccess), err
}

func (m moduleAccessDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ModuleAccess, err error) {
	buf := make([]*model.ModuleAccess, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m moduleAccessDo) FindInBatches(result *[]*model.ModuleAccess, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m moduleAccessDo) Attrs(attrs ...field.AssignExpr) *moduleAccessDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m moduleAccessDo) Assign(attrs ...field.AssignExpr) *moduleAccessDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m moduleAccessDo) Joins(fields ...field.RelationField) *moduleAccessDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m moduleAccessDo) Preload(fields ...field.RelationField) *moduleAccessDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m moduleAccessDo) FirstOrInit() (*model.ModuleAccess, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModuleAccess), nil
	}
}

func (m moduleAccessDo) FirstOrCreate() (*model.ModuleAccess, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModuleAccess), nil
	}
}

func (m moduleAccessDo) FindByPage(offset int, limit int) (result []*model.ModuleAccess, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m moduleAccessDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m moduleAccessDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m moduleAccessDo) Delete(models ...*model.ModuleAccess) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *moduleAccessDo) withDO(do gen.Dao) *moduleAccessDo {
	m.DO = *do.(*gen.DO)
	return m
}

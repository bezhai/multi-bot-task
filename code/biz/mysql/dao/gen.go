// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		ModuleAccess:     newModuleAccess(db, opts...),
		Permission:       newPermission(db, opts...),
		Role:             newRole(db, opts...),
		User:             newUser(db, opts...),
		UserModuleAccess: newUserModuleAccess(db, opts...),
		UserPermission:   newUserPermission(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	ModuleAccess     moduleAccess
	Permission       permission
	Role             role
	User             user
	UserModuleAccess userModuleAccess
	UserPermission   userPermission
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		ModuleAccess:     q.ModuleAccess.clone(db),
		Permission:       q.Permission.clone(db),
		Role:             q.Role.clone(db),
		User:             q.User.clone(db),
		UserModuleAccess: q.UserModuleAccess.clone(db),
		UserPermission:   q.UserPermission.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		ModuleAccess:     q.ModuleAccess.replaceDB(db),
		Permission:       q.Permission.replaceDB(db),
		Role:             q.Role.replaceDB(db),
		User:             q.User.replaceDB(db),
		UserModuleAccess: q.UserModuleAccess.replaceDB(db),
		UserPermission:   q.UserPermission.replaceDB(db),
	}
}

type queryCtx struct {
	ModuleAccess     *moduleAccessDo
	Permission       *permissionDo
	Role             *roleDo
	User             *userDo
	UserModuleAccess *userModuleAccessDo
	UserPermission   *userPermissionDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		ModuleAccess:     q.ModuleAccess.WithContext(ctx),
		Permission:       q.Permission.WithContext(ctx),
		Role:             q.Role.WithContext(ctx),
		User:             q.User.WithContext(ctx),
		UserModuleAccess: q.UserModuleAccess.WithContext(ctx),
		UserPermission:   q.UserPermission.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}

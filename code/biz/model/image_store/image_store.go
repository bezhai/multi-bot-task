// Code generated by thriftgo (0.3.10). DO NOT EDIT.

package image_store

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// 0: 未删除 1: 可见 2: 已删除 3: 全部 4: 不可见
type StatusMode int64

const (
	StatusMode_StatusNotDelete StatusMode = 0
	StatusMode_StatusVisible   StatusMode = 1
	StatusMode_StatusDelete    StatusMode = 2
	StatusMode_StatusAll       StatusMode = 3
	StatusMode_StatusNoVisible StatusMode = 4
)

func (p StatusMode) String() string {
	switch p {
	case StatusMode_StatusNotDelete:
		return "StatusNotDelete"
	case StatusMode_StatusVisible:
		return "StatusVisible"
	case StatusMode_StatusDelete:
		return "StatusDelete"
	case StatusMode_StatusAll:
		return "StatusAll"
	case StatusMode_StatusNoVisible:
		return "StatusNoVisible"
	}
	return "<UNSET>"
}

func StatusModeFromString(s string) (StatusMode, error) {
	switch s {
	case "StatusNotDelete":
		return StatusMode_StatusNotDelete, nil
	case "StatusVisible":
		return StatusMode_StatusVisible, nil
	case "StatusDelete":
		return StatusMode_StatusDelete, nil
	case "StatusAll":
		return StatusMode_StatusAll, nil
	case "StatusNoVisible":
		return StatusMode_StatusNoVisible, nil
	}
	return StatusMode(0), fmt.Errorf("not a valid StatusMode string")
}

func StatusModePtr(v StatusMode) *StatusMode { return &v }
func (p *StatusMode) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = StatusMode(result.Int64)
	return
}

func (p *StatusMode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type MultiTag struct {
	Name        string  `thrift:"name,1,required" bson:"name" form:"name,required" json:"name,required" query:"name,required"`
	Translation *string `thrift:"translation,2,optional" bson:"translation" form:"translation" json:"translation,omitempty" query:"translation"`
	Visible     *bool   `thrift:"visible,3,optional" bson:"visible" form:"visible" json:"visible,omitempty" query:"visible"`
}

func NewMultiTag() *MultiTag {
	return &MultiTag{}
}

func (p *MultiTag) GetName() (v string) {
	return p.Name
}

var MultiTag_Translation_DEFAULT string

func (p *MultiTag) GetTranslation() (v string) {
	if !p.IsSetTranslation() {
		return MultiTag_Translation_DEFAULT
	}
	return *p.Translation
}

var MultiTag_Visible_DEFAULT bool

func (p *MultiTag) GetVisible() (v bool) {
	if !p.IsSetVisible() {
		return MultiTag_Visible_DEFAULT
	}
	return *p.Visible
}

var fieldIDToName_MultiTag = map[int16]string{
	1: "name",
	2: "translation",
	3: "visible",
}

func (p *MultiTag) IsSetTranslation() bool {
	return p.Translation != nil
}

func (p *MultiTag) IsSetVisible() bool {
	return p.Visible != nil
}

func (p *MultiTag) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MultiTag[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_MultiTag[fieldId]))
}

func (p *MultiTag) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}
func (p *MultiTag) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Translation = &v
	}
	return nil
}
func (p *MultiTag) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Visible = &v
	}
	return nil
}

func (p *MultiTag) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MultiTag"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MultiTag) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MultiTag) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTranslation() {
		if err = oprot.WriteFieldBegin("translation", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Translation); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MultiTag) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVisible() {
		if err = oprot.WriteFieldBegin("visible", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Visible); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MultiTag) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiTag(%+v)", *p)

}

type PixivImageMetaInfo struct {
	PixivAddr   string      `thrift:"pixiv_addr,1,required" bson:"pixiv_addr,omitempty" form:"pixiv_addr,required" json:"pixiv_addr,required" query:"pixiv_addr,required"`
	Visible     bool        `thrift:"visible,2,required" bson:"visible,omitempty" form:"visible,required" json:"visible,required" query:"visible,required"`
	Author      string      `thrift:"author,3,required" bson:"author,omitempty" form:"author,required" json:"author,required" query:"author,required"`
	MultiTags   []*MultiTag `thrift:"multi_tags,4,optional" bson:"multi_tags,omitempty" form:"multi_tags" json:"multi_tags,omitempty" query:"multi_tags"`
	CreateTime  int64       `thrift:"create_time,5,required" bson:"create_time,omitempty" form:"create_time,required" json:"create_time,required" query:"create_time,required"`
	UpdateTime  int64       `thrift:"update_time,6,required" bson:"update_time,omitempty" form:"update_time,required" json:"update_time,required" query:"update_time,required"`
	TosFileName string      `thrift:"tos_file_name,7,required" bson:"tos_file_name,omitempty" form:"tos_file_name,required" json:"tos_file_name,required" query:"tos_file_name,required"`
	AuthorID    *string     `thrift:"author_id,8,optional" bson:"author_id,omitempty" form:"author_id" json:"author_id,omitempty" query:"author_id"`
	DelFlag     bool        `thrift:"del_flag,9,required" bson:"del_flag,omitempty" form:"del_flag,required" json:"del_flag,required" query:"del_flag,required"`
	IllustID    int32       `thrift:"illust_id,10,required" bson:"illust_id,omitempty" form:"illust_id,required" json:"illust_id,required" query:"illust_id,required"`
	Title       string      `thrift:"title,11,required" bson:"title,omitempty" form:"title,required" json:"title,required" query:"title,required"`
	ImageKey    *string     `thrift:"image_key,12,optional" bson:"image_key,omitempty" form:"image_key" json:"image_key,omitempty" query:"image_key"`
	Width       *int32      `thrift:"width,13,optional" bson:"width,omitempty" form:"width" json:"width,omitempty" query:"width"`
	Height      *int32      `thrift:"height,14,optional" bson:"height,omitempty" form:"height" json:"height,omitempty" query:"height"`
}

func NewPixivImageMetaInfo() *PixivImageMetaInfo {
	return &PixivImageMetaInfo{}
}

func (p *PixivImageMetaInfo) GetPixivAddr() (v string) {
	return p.PixivAddr
}

func (p *PixivImageMetaInfo) GetVisible() (v bool) {
	return p.Visible
}

func (p *PixivImageMetaInfo) GetAuthor() (v string) {
	return p.Author
}

var PixivImageMetaInfo_MultiTags_DEFAULT []*MultiTag

func (p *PixivImageMetaInfo) GetMultiTags() (v []*MultiTag) {
	if !p.IsSetMultiTags() {
		return PixivImageMetaInfo_MultiTags_DEFAULT
	}
	return p.MultiTags
}

func (p *PixivImageMetaInfo) GetCreateTime() (v int64) {
	return p.CreateTime
}

func (p *PixivImageMetaInfo) GetUpdateTime() (v int64) {
	return p.UpdateTime
}

func (p *PixivImageMetaInfo) GetTosFileName() (v string) {
	return p.TosFileName
}

var PixivImageMetaInfo_AuthorID_DEFAULT string

func (p *PixivImageMetaInfo) GetAuthorID() (v string) {
	if !p.IsSetAuthorID() {
		return PixivImageMetaInfo_AuthorID_DEFAULT
	}
	return *p.AuthorID
}

func (p *PixivImageMetaInfo) GetDelFlag() (v bool) {
	return p.DelFlag
}

func (p *PixivImageMetaInfo) GetIllustID() (v int32) {
	return p.IllustID
}

func (p *PixivImageMetaInfo) GetTitle() (v string) {
	return p.Title
}

var PixivImageMetaInfo_ImageKey_DEFAULT string

func (p *PixivImageMetaInfo) GetImageKey() (v string) {
	if !p.IsSetImageKey() {
		return PixivImageMetaInfo_ImageKey_DEFAULT
	}
	return *p.ImageKey
}

var PixivImageMetaInfo_Width_DEFAULT int32

func (p *PixivImageMetaInfo) GetWidth() (v int32) {
	if !p.IsSetWidth() {
		return PixivImageMetaInfo_Width_DEFAULT
	}
	return *p.Width
}

var PixivImageMetaInfo_Height_DEFAULT int32

func (p *PixivImageMetaInfo) GetHeight() (v int32) {
	if !p.IsSetHeight() {
		return PixivImageMetaInfo_Height_DEFAULT
	}
	return *p.Height
}

var fieldIDToName_PixivImageMetaInfo = map[int16]string{
	1:  "pixiv_addr",
	2:  "visible",
	3:  "author",
	4:  "multi_tags",
	5:  "create_time",
	6:  "update_time",
	7:  "tos_file_name",
	8:  "author_id",
	9:  "del_flag",
	10: "illust_id",
	11: "title",
	12: "image_key",
	13: "width",
	14: "height",
}

func (p *PixivImageMetaInfo) IsSetMultiTags() bool {
	return p.MultiTags != nil
}

func (p *PixivImageMetaInfo) IsSetAuthorID() bool {
	return p.AuthorID != nil
}

func (p *PixivImageMetaInfo) IsSetImageKey() bool {
	return p.ImageKey != nil
}

func (p *PixivImageMetaInfo) IsSetWidth() bool {
	return p.Width != nil
}

func (p *PixivImageMetaInfo) IsSetHeight() bool {
	return p.Height != nil
}

func (p *PixivImageMetaInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPixivAddr bool = false
	var issetVisible bool = false
	var issetAuthor bool = false
	var issetCreateTime bool = false
	var issetUpdateTime bool = false
	var issetTosFileName bool = false
	var issetDelFlag bool = false
	var issetIllustID bool = false
	var issetTitle bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPixivAddr = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetVisible = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetAuthor = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetUpdateTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetTosFileName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetDelFlag = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetIllustID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetTitle = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPixivAddr {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetVisible {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetAuthor {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetUpdateTime {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetTosFileName {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetDelFlag {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetIllustID {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetTitle {
		fieldId = 11
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PixivImageMetaInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PixivImageMetaInfo[fieldId]))
}

func (p *PixivImageMetaInfo) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PixivAddr = v
	}
	return nil
}
func (p *PixivImageMetaInfo) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Visible = v
	}
	return nil
}
func (p *PixivImageMetaInfo) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Author = v
	}
	return nil
}
func (p *PixivImageMetaInfo) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.MultiTags = make([]*MultiTag, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewMultiTag()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.MultiTags = append(p.MultiTags, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *PixivImageMetaInfo) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}
func (p *PixivImageMetaInfo) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UpdateTime = v
	}
	return nil
}
func (p *PixivImageMetaInfo) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TosFileName = v
	}
	return nil
}
func (p *PixivImageMetaInfo) ReadField8(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AuthorID = &v
	}
	return nil
}
func (p *PixivImageMetaInfo) ReadField9(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.DelFlag = v
	}
	return nil
}
func (p *PixivImageMetaInfo) ReadField10(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.IllustID = v
	}
	return nil
}
func (p *PixivImageMetaInfo) ReadField11(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Title = v
	}
	return nil
}
func (p *PixivImageMetaInfo) ReadField12(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ImageKey = &v
	}
	return nil
}
func (p *PixivImageMetaInfo) ReadField13(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Width = &v
	}
	return nil
}
func (p *PixivImageMetaInfo) ReadField14(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Height = &v
	}
	return nil
}

func (p *PixivImageMetaInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PixivImageMetaInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PixivImageMetaInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pixiv_addr", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PixivAddr); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PixivImageMetaInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("visible", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Visible); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PixivImageMetaInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("author", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Author); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PixivImageMetaInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMultiTags() {
		if err = oprot.WriteFieldBegin("multi_tags", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MultiTags)); err != nil {
			return err
		}
		for _, v := range p.MultiTags {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PixivImageMetaInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("create_time", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *PixivImageMetaInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("update_time", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UpdateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *PixivImageMetaInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tos_file_name", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TosFileName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *PixivImageMetaInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorID() {
		if err = oprot.WriteFieldBegin("author_id", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AuthorID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *PixivImageMetaInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("del_flag", thrift.BOOL, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.DelFlag); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *PixivImageMetaInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("illust_id", thrift.I32, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IllustID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *PixivImageMetaInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("title", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Title); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *PixivImageMetaInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetImageKey() {
		if err = oprot.WriteFieldBegin("image_key", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ImageKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *PixivImageMetaInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetWidth() {
		if err = oprot.WriteFieldBegin("width", thrift.I32, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Width); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *PixivImageMetaInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeight() {
		if err = oprot.WriteFieldBegin("height", thrift.I32, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Height); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *PixivImageMetaInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PixivImageMetaInfo(%+v)", *p)

}

type ListPixivImageMetaInfoRequest struct {
	// 模糊查询
	Author *string `thrift:"author,1,optional" form:"author" json:"author,omitempty" query:"author"`
	// 精确查询
	AuthorID *string `thrift:"author_id,2,optional" form:"author_id" json:"author_id,omitempty" query:"author_id"`
	// 按每个tag模糊查询的交集
	Tags     []string   `thrift:"tags,3,optional" form:"tags" json:"tags,omitempty" query:"tags"`
	Status   StatusMode `thrift:"status,4,optional" form:"status" json:"status,omitempty" query:"status"`
	Page     int32      `thrift:"page,5,optional" form:"page" json:"page,omitempty" query:"page"`
	PageSize int32      `thrift:"page_size,6,optional" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	IllustID *int32     `thrift:"illust_id,7,optional" form:"illust_id" json:"illust_id,omitempty" query:"illust_id"`
	// 随机模式, 不分页
	RandomMode *bool `thrift:"random_mode,8,optional" form:"random_mode" json:"random_mode,omitempty" query:"random_mode"`
}

func NewListPixivImageMetaInfoRequest() *ListPixivImageMetaInfoRequest {
	return &ListPixivImageMetaInfoRequest{

		Status:   StatusMode_StatusVisible,
		Page:     1,
		PageSize: 10,
	}
}

var ListPixivImageMetaInfoRequest_Author_DEFAULT string

func (p *ListPixivImageMetaInfoRequest) GetAuthor() (v string) {
	if !p.IsSetAuthor() {
		return ListPixivImageMetaInfoRequest_Author_DEFAULT
	}
	return *p.Author
}

var ListPixivImageMetaInfoRequest_AuthorID_DEFAULT string

func (p *ListPixivImageMetaInfoRequest) GetAuthorID() (v string) {
	if !p.IsSetAuthorID() {
		return ListPixivImageMetaInfoRequest_AuthorID_DEFAULT
	}
	return *p.AuthorID
}

var ListPixivImageMetaInfoRequest_Tags_DEFAULT []string

func (p *ListPixivImageMetaInfoRequest) GetTags() (v []string) {
	if !p.IsSetTags() {
		return ListPixivImageMetaInfoRequest_Tags_DEFAULT
	}
	return p.Tags
}

var ListPixivImageMetaInfoRequest_Status_DEFAULT StatusMode = StatusMode_StatusVisible

func (p *ListPixivImageMetaInfoRequest) GetStatus() (v StatusMode) {
	if !p.IsSetStatus() {
		return ListPixivImageMetaInfoRequest_Status_DEFAULT
	}
	return p.Status
}

var ListPixivImageMetaInfoRequest_Page_DEFAULT int32 = 1

func (p *ListPixivImageMetaInfoRequest) GetPage() (v int32) {
	if !p.IsSetPage() {
		return ListPixivImageMetaInfoRequest_Page_DEFAULT
	}
	return p.Page
}

var ListPixivImageMetaInfoRequest_PageSize_DEFAULT int32 = 10

func (p *ListPixivImageMetaInfoRequest) GetPageSize() (v int32) {
	if !p.IsSetPageSize() {
		return ListPixivImageMetaInfoRequest_PageSize_DEFAULT
	}
	return p.PageSize
}

var ListPixivImageMetaInfoRequest_IllustID_DEFAULT int32

func (p *ListPixivImageMetaInfoRequest) GetIllustID() (v int32) {
	if !p.IsSetIllustID() {
		return ListPixivImageMetaInfoRequest_IllustID_DEFAULT
	}
	return *p.IllustID
}

var ListPixivImageMetaInfoRequest_RandomMode_DEFAULT bool

func (p *ListPixivImageMetaInfoRequest) GetRandomMode() (v bool) {
	if !p.IsSetRandomMode() {
		return ListPixivImageMetaInfoRequest_RandomMode_DEFAULT
	}
	return *p.RandomMode
}

var fieldIDToName_ListPixivImageMetaInfoRequest = map[int16]string{
	1: "author",
	2: "author_id",
	3: "tags",
	4: "status",
	5: "page",
	6: "page_size",
	7: "illust_id",
	8: "random_mode",
}

func (p *ListPixivImageMetaInfoRequest) IsSetAuthor() bool {
	return p.Author != nil
}

func (p *ListPixivImageMetaInfoRequest) IsSetAuthorID() bool {
	return p.AuthorID != nil
}

func (p *ListPixivImageMetaInfoRequest) IsSetTags() bool {
	return p.Tags != nil
}

func (p *ListPixivImageMetaInfoRequest) IsSetStatus() bool {
	return p.Status != ListPixivImageMetaInfoRequest_Status_DEFAULT
}

func (p *ListPixivImageMetaInfoRequest) IsSetPage() bool {
	return p.Page != ListPixivImageMetaInfoRequest_Page_DEFAULT
}

func (p *ListPixivImageMetaInfoRequest) IsSetPageSize() bool {
	return p.PageSize != ListPixivImageMetaInfoRequest_PageSize_DEFAULT
}

func (p *ListPixivImageMetaInfoRequest) IsSetIllustID() bool {
	return p.IllustID != nil
}

func (p *ListPixivImageMetaInfoRequest) IsSetRandomMode() bool {
	return p.RandomMode != nil
}

func (p *ListPixivImageMetaInfoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPixivImageMetaInfoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListPixivImageMetaInfoRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Author = &v
	}
	return nil
}
func (p *ListPixivImageMetaInfoRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AuthorID = &v
	}
	return nil
}
func (p *ListPixivImageMetaInfoRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Tags = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Tags = append(p.Tags, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *ListPixivImageMetaInfoRequest) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = StatusMode(v)
	}
	return nil
}
func (p *ListPixivImageMetaInfoRequest) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Page = v
	}
	return nil
}
func (p *ListPixivImageMetaInfoRequest) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}
func (p *ListPixivImageMetaInfoRequest) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.IllustID = &v
	}
	return nil
}
func (p *ListPixivImageMetaInfoRequest) ReadField8(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.RandomMode = &v
	}
	return nil
}

func (p *ListPixivImageMetaInfoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPixivImageMetaInfoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPixivImageMetaInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthor() {
		if err = oprot.WriteFieldBegin("author", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Author); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListPixivImageMetaInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorID() {
		if err = oprot.WriteFieldBegin("author_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AuthorID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListPixivImageMetaInfoRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTags() {
		if err = oprot.WriteFieldBegin("tags", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Tags)); err != nil {
			return err
		}
		for _, v := range p.Tags {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListPixivImageMetaInfoRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(p.Status)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListPixivImageMetaInfoRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListPixivImageMetaInfoRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ListPixivImageMetaInfoRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIllustID() {
		if err = oprot.WriteFieldBegin("illust_id", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.IllustID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ListPixivImageMetaInfoRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetRandomMode() {
		if err = oprot.WriteFieldBegin("random_mode", thrift.BOOL, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.RandomMode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ListPixivImageMetaInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPixivImageMetaInfoRequest(%+v)", *p)

}

type PixivImageMetaInfoWithUrl struct {
	PixivImageMetaInfo *PixivImageMetaInfo `thrift:"pixiv_image_meta_info,1,required" form:"pixiv_image_meta_info,required" json:"pixiv_image_meta_info,required" query:"pixiv_image_meta_info,required"`
	ShowURL            *string             `thrift:"show_url,2,optional" form:"show_url" json:"show_url,omitempty" query:"show_url"`
	DownloadURL        *string             `thrift:"download_url,3,optional" form:"download_url" json:"download_url,omitempty" query:"download_url"`
}

func NewPixivImageMetaInfoWithUrl() *PixivImageMetaInfoWithUrl {
	return &PixivImageMetaInfoWithUrl{}
}

var PixivImageMetaInfoWithUrl_PixivImageMetaInfo_DEFAULT *PixivImageMetaInfo

func (p *PixivImageMetaInfoWithUrl) GetPixivImageMetaInfo() (v *PixivImageMetaInfo) {
	if !p.IsSetPixivImageMetaInfo() {
		return PixivImageMetaInfoWithUrl_PixivImageMetaInfo_DEFAULT
	}
	return p.PixivImageMetaInfo
}

var PixivImageMetaInfoWithUrl_ShowURL_DEFAULT string

func (p *PixivImageMetaInfoWithUrl) GetShowURL() (v string) {
	if !p.IsSetShowURL() {
		return PixivImageMetaInfoWithUrl_ShowURL_DEFAULT
	}
	return *p.ShowURL
}

var PixivImageMetaInfoWithUrl_DownloadURL_DEFAULT string

func (p *PixivImageMetaInfoWithUrl) GetDownloadURL() (v string) {
	if !p.IsSetDownloadURL() {
		return PixivImageMetaInfoWithUrl_DownloadURL_DEFAULT
	}
	return *p.DownloadURL
}

var fieldIDToName_PixivImageMetaInfoWithUrl = map[int16]string{
	1: "pixiv_image_meta_info",
	2: "show_url",
	3: "download_url",
}

func (p *PixivImageMetaInfoWithUrl) IsSetPixivImageMetaInfo() bool {
	return p.PixivImageMetaInfo != nil
}

func (p *PixivImageMetaInfoWithUrl) IsSetShowURL() bool {
	return p.ShowURL != nil
}

func (p *PixivImageMetaInfoWithUrl) IsSetDownloadURL() bool {
	return p.DownloadURL != nil
}

func (p *PixivImageMetaInfoWithUrl) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPixivImageMetaInfo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPixivImageMetaInfo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPixivImageMetaInfo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PixivImageMetaInfoWithUrl[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PixivImageMetaInfoWithUrl[fieldId]))
}

func (p *PixivImageMetaInfoWithUrl) ReadField1(iprot thrift.TProtocol) error {
	p.PixivImageMetaInfo = NewPixivImageMetaInfo()
	if err := p.PixivImageMetaInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *PixivImageMetaInfoWithUrl) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ShowURL = &v
	}
	return nil
}
func (p *PixivImageMetaInfoWithUrl) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DownloadURL = &v
	}
	return nil
}

func (p *PixivImageMetaInfoWithUrl) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PixivImageMetaInfoWithUrl"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PixivImageMetaInfoWithUrl) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pixiv_image_meta_info", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.PixivImageMetaInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PixivImageMetaInfoWithUrl) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetShowURL() {
		if err = oprot.WriteFieldBegin("show_url", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ShowURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PixivImageMetaInfoWithUrl) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDownloadURL() {
		if err = oprot.WriteFieldBegin("download_url", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DownloadURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PixivImageMetaInfoWithUrl) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PixivImageMetaInfoWithUrl(%+v)", *p)

}

type ListPixivImageMetaInfoResponseData struct {
	PixivImageMetaInfos []*PixivImageMetaInfoWithUrl `thrift:"pixiv_image_meta_infos,1,required" form:"pixiv_image_meta_infos,required" json:"pixiv_image_meta_infos,required" query:"pixiv_image_meta_infos,required"`
	Total               int32                        `thrift:"total,2,required" form:"total,required" json:"total,required" query:"total,required"`
}

func NewListPixivImageMetaInfoResponseData() *ListPixivImageMetaInfoResponseData {
	return &ListPixivImageMetaInfoResponseData{}
}

func (p *ListPixivImageMetaInfoResponseData) GetPixivImageMetaInfos() (v []*PixivImageMetaInfoWithUrl) {
	return p.PixivImageMetaInfos
}

func (p *ListPixivImageMetaInfoResponseData) GetTotal() (v int32) {
	return p.Total
}

var fieldIDToName_ListPixivImageMetaInfoResponseData = map[int16]string{
	1: "pixiv_image_meta_infos",
	2: "total",
}

func (p *ListPixivImageMetaInfoResponseData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPixivImageMetaInfos bool = false
	var issetTotal bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPixivImageMetaInfos = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPixivImageMetaInfos {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTotal {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPixivImageMetaInfoResponseData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListPixivImageMetaInfoResponseData[fieldId]))
}

func (p *ListPixivImageMetaInfoResponseData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PixivImageMetaInfos = make([]*PixivImageMetaInfoWithUrl, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewPixivImageMetaInfoWithUrl()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PixivImageMetaInfos = append(p.PixivImageMetaInfos, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *ListPixivImageMetaInfoResponseData) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListPixivImageMetaInfoResponseData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPixivImageMetaInfoResponseData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPixivImageMetaInfoResponseData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pixiv_image_meta_infos", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PixivImageMetaInfos)); err != nil {
		return err
	}
	for _, v := range p.PixivImageMetaInfos {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListPixivImageMetaInfoResponseData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListPixivImageMetaInfoResponseData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPixivImageMetaInfoResponseData(%+v)", *p)

}

type ListPixivImageMetaInfoResponse struct {
	Code int32                               `thrift:"code,1,required" form:"code,required" json:"code,required" query:"code,required"`
	Msg  string                              `thrift:"msg,2,required" form:"msg,required" json:"msg,required" query:"msg,required"`
	Data *ListPixivImageMetaInfoResponseData `thrift:"data,3,optional" form:"data" json:"data,omitempty" query:"data"`
}

func NewListPixivImageMetaInfoResponse() *ListPixivImageMetaInfoResponse {
	return &ListPixivImageMetaInfoResponse{}
}

func (p *ListPixivImageMetaInfoResponse) GetCode() (v int32) {
	return p.Code
}

func (p *ListPixivImageMetaInfoResponse) GetMsg() (v string) {
	return p.Msg
}

var ListPixivImageMetaInfoResponse_Data_DEFAULT *ListPixivImageMetaInfoResponseData

func (p *ListPixivImageMetaInfoResponse) GetData() (v *ListPixivImageMetaInfoResponseData) {
	if !p.IsSetData() {
		return ListPixivImageMetaInfoResponse_Data_DEFAULT
	}
	return p.Data
}

var fieldIDToName_ListPixivImageMetaInfoResponse = map[int16]string{
	1: "code",
	2: "msg",
	3: "data",
}

func (p *ListPixivImageMetaInfoResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *ListPixivImageMetaInfoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCode bool = false
	var issetMsg bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetMsg = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCode {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMsg {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPixivImageMetaInfoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListPixivImageMetaInfoResponse[fieldId]))
}

func (p *ListPixivImageMetaInfoResponse) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}
func (p *ListPixivImageMetaInfoResponse) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}
func (p *ListPixivImageMetaInfoResponse) ReadField3(iprot thrift.TProtocol) error {
	p.Data = NewListPixivImageMetaInfoResponseData()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListPixivImageMetaInfoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPixivImageMetaInfoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPixivImageMetaInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListPixivImageMetaInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListPixivImageMetaInfoResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListPixivImageMetaInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPixivImageMetaInfoResponse(%+v)", *p)

}

type UpdatePixivImageStatusRequest struct {
	PixivAddrList []string `thrift:"pixiv_addr_list,1,required" form:"pixiv_addr_list,required" json:"pixiv_addr_list,required" query:"pixiv_addr_list,required" vd:"len($) > 0; msg:'pixiv_addr_list is empty'"`
	// 1: 可见 2: 删除 4: 不可见
	Status StatusMode `thrift:"status,2,required" form:"status,required" json:"status,required" query:"status,required" vd:"in($, 1, 2, 4); msg:'valid status is visible, no_visible or deleted'"`
}

func NewUpdatePixivImageStatusRequest() *UpdatePixivImageStatusRequest {
	return &UpdatePixivImageStatusRequest{}
}

func (p *UpdatePixivImageStatusRequest) GetPixivAddrList() (v []string) {
	return p.PixivAddrList
}

func (p *UpdatePixivImageStatusRequest) GetStatus() (v StatusMode) {
	return p.Status
}

var fieldIDToName_UpdatePixivImageStatusRequest = map[int16]string{
	1: "pixiv_addr_list",
	2: "status",
}

func (p *UpdatePixivImageStatusRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPixivAddrList bool = false
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPixivAddrList = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPixivAddrList {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdatePixivImageStatusRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdatePixivImageStatusRequest[fieldId]))
}

func (p *UpdatePixivImageStatusRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PixivAddrList = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.PixivAddrList = append(p.PixivAddrList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *UpdatePixivImageStatusRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = StatusMode(v)
	}
	return nil
}

func (p *UpdatePixivImageStatusRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePixivImageStatusRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdatePixivImageStatusRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pixiv_addr_list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PixivAddrList)); err != nil {
		return err
	}
	for _, v := range p.PixivAddrList {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdatePixivImageStatusRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdatePixivImageStatusRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePixivImageStatusRequest(%+v)", *p)

}

type UpdatePixivImageStatusResponse struct {
	Code int32  `thrift:"code,1,required" form:"code,required" json:"code,required" query:"code,required"`
	Msg  string `thrift:"msg,2,required" form:"msg,required" json:"msg,required" query:"msg,required"`
}

func NewUpdatePixivImageStatusResponse() *UpdatePixivImageStatusResponse {
	return &UpdatePixivImageStatusResponse{}
}

func (p *UpdatePixivImageStatusResponse) GetCode() (v int32) {
	return p.Code
}

func (p *UpdatePixivImageStatusResponse) GetMsg() (v string) {
	return p.Msg
}

var fieldIDToName_UpdatePixivImageStatusResponse = map[int16]string{
	1: "code",
	2: "msg",
}

func (p *UpdatePixivImageStatusResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCode bool = false
	var issetMsg bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetMsg = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCode {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMsg {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdatePixivImageStatusResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdatePixivImageStatusResponse[fieldId]))
}

func (p *UpdatePixivImageStatusResponse) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}
func (p *UpdatePixivImageStatusResponse) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}

func (p *UpdatePixivImageStatusResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePixivImageStatusResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdatePixivImageStatusResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdatePixivImageStatusResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdatePixivImageStatusResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePixivImageStatusResponse(%+v)", *p)

}
